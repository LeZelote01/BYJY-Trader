#!/usr/bin/env python3
"""
Script de collecte de donn√©es Phase 2 - Intelligence Artificielle
Collecte les donn√©es pour les symboles prioritaires selon le roadmap BYJY-Trader
"""

import asyncio
import aiohttp
import json
from datetime import datetime, timedelta
import time

# Configuration selon le roadmap Phase 2
SYMBOLS_PRIORITY = [
    "AAPL",   # Apple - Stock
    "MSFT",   # Microsoft - Stock  
    "TSLA",   # Tesla - Stock
    "BTC-USD", # Bitcoin - Crypto
    "ETH-USD"  # Ethereum - Crypto
]

API_BASE_URL = "http://localhost:8001"
START_DATE = "2024-01-01T00:00:00Z"  # 12+ mois de donn√©es

async def collect_symbol_data(session, symbol):
    """Collecte les donn√©es pour un symbole sp√©cifique"""
    print(f"üîÑ D√©marrage collecte {symbol}...")
    
    collection_request = {
        "symbol": symbol,
        "sources": ["yahoo"],
        "intervals": ["1d"],
        "start_date": START_DATE,
        "generate_features": True
    }
    
    try:
        async with session.post(
            f"{API_BASE_URL}/api/data/collect",
            json=collection_request,
            timeout=aiohttp.ClientTimeout(total=30)
        ) as response:
            if response.status == 200:
                result = await response.json()
                task_id = result.get("task_id")
                print(f"‚úÖ {symbol}: Collecte d√©marr√©e - Task ID: {task_id}")
                return task_id
            else:
                error_text = await response.text()
                print(f"‚ùå {symbol}: Erreur {response.status} - {error_text}")
                return None
                
    except Exception as e:
        print(f"‚ùå {symbol}: Exception - {str(e)}")
        return None

async def check_task_status(session, task_id, symbol):
    """V√©rifie le statut d'une t√¢che de collecte"""
    try:
        async with session.get(
            f"{API_BASE_URL}/api/data/tasks/{task_id}",
            timeout=aiohttp.ClientTimeout(total=10)
        ) as response:
            if response.status == 200:
                result = await response.json()
                status = result.get("status", "unknown")
                print(f"üìä {symbol}: Status = {status}")
                return result
            else:
                print(f"‚ö†Ô∏è {symbol}: Erreur status {response.status}")
                return None
    except Exception as e:
        print(f"‚ö†Ô∏è {symbol}: Erreur check status - {str(e)}")
        return None

async def main():
    """Fonction principale de collecte"""
    print("üöÄ BYJY-Trader Phase 2 - Collecte Donn√©es IA")
    print("=" * 50)
    
    # Cr√©er session HTTP
    async with aiohttp.ClientSession() as session:
        
        # √âtape 1: D√©marrer toutes les collectes
        print("üì° √âtape 1: D√©marrage collectes multiples...")
        tasks = {}
        
        for symbol in SYMBOLS_PRIORITY:
            task_id = await collect_symbol_data(session, symbol)
            if task_id:
                tasks[symbol] = task_id
            await asyncio.sleep(2)  # Rate limiting
        
        print(f"\n‚úÖ {len(tasks)} collectes d√©marr√©es sur {len(SYMBOLS_PRIORITY)} symboles")
        
        # √âtape 2: Monitoring des t√¢ches
        print("\nüìä √âtape 2: Monitoring des t√¢ches...")
        completed = set()
        max_checks = 30  # Max 5 minutes de monitoring
        
        for check_round in range(max_checks):
            print(f"\nüîç V√©rification {check_round + 1}/{max_checks}")
            
            for symbol, task_id in tasks.items():
                if symbol not in completed:
                    status_result = await check_task_status(session, task_id, symbol)
                    if status_result and status_result.get("status") == "completed":
                        completed.add(symbol)
                        data_points = status_result.get("result", {}).get("data_points", 0)
                        print(f"üéâ {symbol}: TERMIN√â - {data_points} points collect√©s")
            
            # Si toutes les t√¢ches sont termin√©es
            if len(completed) == len(tasks):
                break
                
            await asyncio.sleep(10)  # Attendre 10s entre les v√©rifications
        
        # R√©sum√© final
        print("\n" + "=" * 50)
        print("üìä R√âSUM√â COLLECTE PHASE 2")
        print("=" * 50)
        print(f"‚úÖ Collectes termin√©es: {len(completed)}/{len(tasks)}")
        print(f"üìà Symboles collect√©s: {', '.join(sorted(completed))}")
        
        if len(completed) < len(tasks):
            pending = set(tasks.keys()) - completed
            print(f"‚è≥ En cours: {', '.join(sorted(pending))}")
        
        print("\nüéØ Prochaine √©tape: Entra√Ænement mod√®les LSTM")

if __name__ == "__main__":
    asyncio.run(main())