"""
üì° Binance WebSocket - Phase 2.4

WebSocket handler pour flux temps r√©el Binance.
Support streams multiples avec reconnection automatique.

Features:
- Multiple streams simultan√©s
- Reconnection automatique
- Gestion heartbeat
- Buffer messages et rate limiting
"""

import asyncio
import json
import time
from datetime import datetime
from typing import Dict, List, Optional, Any, Callable, Set
import websockets
from websockets.exceptions import ConnectionClosedError, ConnectionClosedOK

from core.logger import get_logger

logger = get_logger(__name__)


class BinanceWebSocket:
    """
    Gestionnaire WebSocket Binance
    
    G√®re connexions WebSocket multiples pour diff√©rents types de streams
    avec reconnection automatique et gestion d'erreurs robuste.
    """
    
    def __init__(self, base_url: str):
        """
        Initialise le gestionnaire WebSocket
        
        Args:
            base_url: URL de base WebSocket Binance
        """
        self.base_url = base_url.rstrip('/')
        self.websocket = None
        self.connected = False
        self.subscribed_streams: Set[str] = set()
        
        # Callbacks par type de stream
        self.callbacks: Dict[str, List[Callable]] = {
            "ticker": [],
            "depth": [],
            "trade": [],
            "kline": [],
            "bookTicker": [],
            "error": [],
            "connection": []
        }
        
        # Configuration
        self.heartbeat_interval = 30.0  # secondes
        self.max_reconnect_attempts = 10
        self.reconnect_delay = 5.0
        self.message_timeout = 60.0
        
        # M√©triques
        self.metrics = {
            "messages_received": 0,
            "messages_processed": 0,
            "reconnections": 0,
            "errors": 0,
            "connected_at": None,
            "last_message_at": None
        }
        
        # Tasks asyncio
        self._listen_task = None
        self._heartbeat_task = None
        
        logger.info("üì° BinanceWebSocket initialis√©")
    
    async def connect(self) -> bool:
        """
        Se connecter au WebSocket Binance
        
        Returns:
            bool: True si connexion r√©ussie
        """
        try:
            if self.connected:
                logger.warning("‚ö†Ô∏è WebSocket d√©j√† connect√©")
                return True
            
            # URL de base pour streams combin√©s
            ws_url = f"{self.base_url}/ws/byjy_trader_stream"
            
            logger.info(f"üîó Connexion WebSocket Binance: {ws_url}")
            
            # √âtablir connexion
            self.websocket = await websockets.connect(
                ws_url,
                ping_interval=20,
                ping_timeout=10,
                close_timeout=5
            )
            
            self.connected = True
            self.metrics["connected_at"] = datetime.now()
            
            # D√©marrer t√¢ches
            self._listen_task = asyncio.create_task(self._listen_loop())
            self._heartbeat_task = asyncio.create_task(self._heartbeat_loop())
            
            # Notifier connexion
            await self._emit_event("connection", {
                "status": "connected",
                "timestamp": datetime.now().isoformat()
            })
            
            logger.info("‚úÖ WebSocket Binance connect√© avec succ√®s")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur connexion WebSocket: {e}")
            self.connected = False
            return False
    
    async def disconnect(self) -> bool:
        """
        D√©connecter WebSocket proprement
        
        Returns:
            bool: True si d√©connexion propre
        """
        try:
            if not self.connected:
                return True
            
            logger.info("üîå D√©connexion WebSocket Binance...")
            
            # Arr√™ter t√¢ches
            if self._listen_task:
                self._listen_task.cancel()
            if self._heartbeat_task:
                self._heartbeat_task.cancel()
            
            # Fermer connexion WebSocket
            if self.websocket:
                await self.websocket.close()
            
            self.connected = False
            self.subscribed_streams.clear()
            
            # Notifier d√©connexion
            await self._emit_event("connection", {
                "status": "disconnected",
                "timestamp": datetime.now().isoformat()
            })
            
            logger.info("‚úÖ WebSocket Binance d√©connect√© proprement")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur d√©connexion WebSocket: {e}")
            return False
    
    async def subscribe_ticker(self, symbol: str) -> bool:
        """
        S'abonner au ticker d'un symbole
        
        Args:
            symbol: Symbole √† suivre (ex: btcusdt)
            
        Returns:
            bool: True si abonnement r√©ussi
        """
        stream_name = f"{symbol.lower()}@ticker"
        return await self._subscribe_stream(stream_name, "ticker")
    
    async def subscribe_depth(self, symbol: str, levels: int = 20) -> bool:
        """
        S'abonner √† l'order book depth
        
        Args:
            symbol: Symbole √† suivre
            levels: Nombre de niveaux (5, 10, 20)
            
        Returns:
            bool: True si abonnement r√©ussi
        """
        stream_name = f"{symbol.lower()}@depth{levels}@100ms"
        return await self._subscribe_stream(stream_name, "depth")
    
    async def subscribe_trades(self, symbol: str) -> bool:
        """
        S'abonner aux trades temps r√©el
        
        Args:
            symbol: Symbole √† suivre
            
        Returns:
            bool: True si abonnement r√©ussi
        """
        stream_name = f"{symbol.lower()}@trade"
        return await self._subscribe_stream(stream_name, "trade")
    
    async def subscribe_klines(self, symbol: str, interval: str = "1m") -> bool:
        """
        S'abonner aux klines/candlesticks
        
        Args:
            symbol: Symbole √† suivre
            interval: Intervalle (1m, 5m, 1h, 1d, etc.)
            
        Returns:
            bool: True si abonnement r√©ussi
        """
        stream_name = f"{symbol.lower()}@kline_{interval}"
        return await self._subscribe_stream(stream_name, "kline")
    
    async def subscribe_book_ticker(self, symbol: str) -> bool:
        """
        S'abonner au best bid/ask prix
        
        Args:
            symbol: Symbole √† suivre
            
        Returns:
            bool: True si abonnement r√©ussi
        """
        stream_name = f"{symbol.lower()}@bookTicker"
        return await self._subscribe_stream(stream_name, "bookTicker")
    
    async def _subscribe_stream(self, stream_name: str, stream_type: str) -> bool:
        """
        S'abonner √† un stream sp√©cifique
        
        Args:
            stream_name: Nom du stream Binance
            stream_type: Type de stream pour callbacks
            
        Returns:
            bool: True si abonnement r√©ussi
        """
        try:
            if not self.connected:
                logger.error("‚ùå WebSocket non connect√©")
                return False
            
            if stream_name in self.subscribed_streams:
                logger.warning(f"‚ö†Ô∏è D√©j√† abonn√© au stream: {stream_name}")
                return True
            
            # Message d'abonnement Binance
            subscribe_message = {
                "method": "SUBSCRIBE",
                "params": [stream_name],
                "id": int(time.time())
            }
            
            # Envoyer abonnement
            await self.websocket.send(json.dumps(subscribe_message))
            
            # Marquer comme abonn√©
            self.subscribed_streams.add(stream_name)
            
            logger.info(f"‚úÖ Abonnement stream r√©ussi: {stream_name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur abonnement stream {stream_name}: {e}")
            return False
    
    async def unsubscribe_stream(self, stream_name: str) -> bool:
        """
        Se d√©sabonner d'un stream
        
        Args:
            stream_name: Nom du stream √† d√©sabonner
            
        Returns:
            bool: True si d√©sabonnement r√©ussi
        """
        try:
            if not self.connected:
                return True
            
            if stream_name not in self.subscribed_streams:
                return True
            
            # Message de d√©sabonnement
            unsubscribe_message = {
                "method": "UNSUBSCRIBE",
                "params": [stream_name],
                "id": int(time.time())
            }
            
            await self.websocket.send(json.dumps(unsubscribe_message))
            self.subscribed_streams.discard(stream_name)
            
            logger.info(f"‚úÖ D√©sabonnement stream r√©ussi: {stream_name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur d√©sabonnement stream {stream_name}: {e}")
            return False
    
    async def _listen_loop(self):
        """
        Boucle d'√©coute des messages WebSocket
        """
        reconnect_attempts = 0
        
        while self.connected:
            try:
                # Recevoir message avec timeout
                message = await asyncio.wait_for(
                    self.websocket.recv(),
                    timeout=self.message_timeout
                )
                
                # Traiter message
                await self._handle_message(message)
                
                # Reset compteur reconnexions sur succ√®s
                reconnect_attempts = 0
                
                # Mettre √† jour m√©triques
                self.metrics["messages_received"] += 1
                self.metrics["last_message_at"] = datetime.now()
                
            except asyncio.TimeoutError:
                logger.warning("‚è∞ Timeout WebSocket - Pas de message re√ßu")
                continue
                
            except (ConnectionClosedError, ConnectionClosedOK) as e:
                logger.warning(f"üîå Connexion WebSocket ferm√©e: {e}")
                
                if reconnect_attempts < self.max_reconnect_attempts:
                    reconnect_attempts += 1
                    logger.info(f"üîÑ Tentative reconnexion {reconnect_attempts}/{self.max_reconnect_attempts}")
                    
                    # Attendre avant reconnexion
                    await asyncio.sleep(self.reconnect_delay * reconnect_attempts)
                    
                    # Tenter reconnexion
                    if await self._reconnect():
                        self.metrics["reconnections"] += 1
                        continue
                    
                else:
                    logger.error(f"‚ùå Max reconnexions atteint ({self.max_reconnect_attempts})")
                    self.connected = False
                    break
                    
            except Exception as e:
                logger.error(f"‚ùå Erreur √©coute WebSocket: {e}")
                self.metrics["errors"] += 1
                await asyncio.sleep(1.0)
        
        logger.info("üîö Boucle √©coute WebSocket termin√©e")
    
    async def _handle_message(self, raw_message: str):
        """
        Traiter un message WebSocket re√ßu
        
        Args:
            raw_message: Message brut JSON
        """
        try:
            message = json.loads(raw_message)
            
            # Ignorer messages de confirmation d'abonnement
            if "result" in message and message["result"] is None:
                logger.debug("üìù Confirmation abonnement re√ßue")
                return
            
            # Messages avec erreur
            if "error" in message:
                logger.error(f"‚ùå Erreur WebSocket: {message['error']}")
                await self._emit_event("error", message["error"])
                return
            
            # Messages de donn√©es de stream
            if "stream" in message and "data" in message:
                stream_name = message["stream"]
                data = message["data"]
                
                # D√©terminer type de stream
                stream_type = self._get_stream_type(stream_name)
                if stream_type:
                    # Enrichir data avec m√©tadonn√©es
                    enriched_data = {
                        **data,
                        "stream": stream_name,
                        "timestamp": datetime.now().isoformat(),
                        "exchange": "binance"
                    }
                    
                    # √âmettre vers callbacks
                    await self._emit_event(stream_type, enriched_data)
                    self.metrics["messages_processed"] += 1
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå Message JSON invalide: {e}")
            logger.debug(f"Message brut: {raw_message[:200]}")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur traitement message: {e}")
    
    def _get_stream_type(self, stream_name: str) -> Optional[str]:
        """
        D√©terminer le type de stream depuis son nom
        
        Args:
            stream_name: Nom du stream Binance
            
        Returns:
            str: Type de stream pour callbacks
        """
        if "@ticker" in stream_name:
            return "ticker"
        elif "@depth" in stream_name:
            return "depth"
        elif "@trade" in stream_name:
            return "trade"
        elif "@kline" in stream_name:
            return "kline"
        elif "@bookTicker" in stream_name:
            return "bookTicker"
        else:
            logger.warning(f"‚ö†Ô∏è Type de stream inconnu: {stream_name}")
            return None
    
    async def _reconnect(self) -> bool:
        """
        Reconnecter apr√®s perte de connexion
        
        Returns:
            bool: True si reconnexion r√©ussie
        """
        try:
            # Nettoyer ancienne connexion
            if self.websocket:
                await self.websocket.close()
            
            self.connected = False
            
            # Nouvelle connexion
            success = await self.connect()
            if not success:
                return False
            
            # Re-s'abonner aux streams pr√©c√©dents
            streams_to_resubscribe = self.subscribed_streams.copy()
            self.subscribed_streams.clear()
            
            for stream_name in streams_to_resubscribe:
                stream_type = self._get_stream_type(stream_name)
                if stream_type:
                    await self._subscribe_stream(stream_name, stream_type)
            
            logger.info(f"‚úÖ Reconnexion r√©ussie avec {len(streams_to_resubscribe)} streams")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur reconnexion: {e}")
            return False
    
    async def _heartbeat_loop(self):
        """
        Boucle heartbeat pour maintenir connexion
        """
        while self.connected:
            try:
                await asyncio.sleep(self.heartbeat_interval)
                
                if self.connected and self.websocket:
                    # Ping WebSocket
                    pong = await self.websocket.ping()
                    await asyncio.wait_for(pong, timeout=10)
                    
                    logger.debug("üíì Heartbeat WebSocket OK")
                
            except asyncio.TimeoutError:
                logger.warning("‚ö†Ô∏è Heartbeat timeout")
            except Exception as e:
                logger.error(f"‚ùå Erreur heartbeat: {e}")
                break
        
        logger.info("üíì Heartbeat WebSocket termin√©")
    
    def add_callback(self, stream_type: str, callback: Callable):
        """
        Ajouter callback pour un type de stream
        
        Args:
            stream_type: Type de stream (ticker, depth, etc.)
            callback: Fonction callback async
        """
        if stream_type in self.callbacks:
            self.callbacks[stream_type].append(callback)
            logger.debug(f"üìù Callback ajout√© pour {stream_type}")
        else:
            logger.warning(f"‚ö†Ô∏è Type de stream inconnu: {stream_type}")
    
    async def _emit_event(self, event_type: str, data: Dict[str, Any]):
        """
        √âmettre √©v√©nement vers callbacks
        
        Args:
            event_type: Type d'√©v√©nement
            data: Donn√©es √† transmettre
        """
        if event_type in self.callbacks:
            for callback in self.callbacks[event_type]:
                try:
                    await callback(data)
                except Exception as e:
                    logger.error(f"‚ùå Erreur callback {event_type}: {e}")
    
    def get_status(self) -> Dict[str, Any]:
        """
        R√©cup√©rer status du WebSocket
        
        Returns:
            Dict avec informations de status
        """
        return {
            "connected": self.connected,
            "subscribed_streams": list(self.subscribed_streams),
            "subscribed_count": len(self.subscribed_streams),
            "metrics": {
                **self.metrics,
                "connected_at": self.metrics["connected_at"].isoformat() if self.metrics["connected_at"] else None,
                "last_message_at": self.metrics["last_message_at"].isoformat() if self.metrics["last_message_at"] else None
            },
            "base_url": self.base_url
        }
    
    def __str__(self) -> str:
        status = "connected" if self.connected else "disconnected"
        return f"<BinanceWebSocket(status={status}, streams={len(self.subscribed_streams)})>"
    
    def __repr__(self) -> str:
        return self.__str__()